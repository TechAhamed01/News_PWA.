import { precacheAndRoute } from 'workbox-precaching';

// Precache and route all assets generated by Vite
precacheAndRoute(self.__WB_MANIFEST);

// Cache news API responses
import { registerRoute } from 'workbox-routing';
import { NetworkFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { ExpirationPlugin } from 'workbox-expiration';

// Cache API responses for news articles
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/news'),
  new NetworkFirst({
    cacheName: 'news-api-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24, // 24 hours
        maxEntries: 50,
      }),
    ],
  })
);

// Handle navigation requests with a network-first strategy
import { NavigationRoute } from 'workbox-routing';
import { NetworkFirst } from 'workbox-strategies';

const navigationHandler = new NetworkFirst({
  cacheName: 'news-app-navigations',
  plugins: [
    new ExpirationPlugin({
      maxEntries: 10,
      maxAgeSeconds: 60 * 60 * 24, // 24 hours
    }),
  ],
});

const navigationRoute = new NavigationRoute(navigationHandler, {
  // Allowlist all routes
  allowlist: [/./],
});

registerRoute(navigationRoute);

self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Custom service worker for News PWA App
self.addEventListener('install', (event) => {
  console.log('Service Worker installing.');
  
  // Pre-cache the offline page
  event.waitUntil(
    caches.open('news-pwa-static-v1').then((cache) => {
      return cache.addAll([
        '/offline.html',
        '/index.html',
        '/'
      ]);
    })
  );
});

self.addEventListener('activate', (event) => {
  console.log('Service Worker activating.');
});

self.addEventListener('fetch', (event) => {
  // For navigation requests, serve the offline page if offline
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match('/offline.html');
      })
    );
    return;
  }
  
  // For other requests, try to serve from cache first
  event.respondWith(
    fetch(event.request).catch(() => {
      return caches.match(event.request);
    })
  );
});
